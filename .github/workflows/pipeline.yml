name: Build docker container

on:
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1
      - name: Login to Amazon ECR
        id: ecr-user
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        env:
            ECR_REGISTRY: ${{ steps.ecr-user.outputs.registry }}
            ECR_REPOSITORY: quote-repo
            IMAGE_TAG: latest
        run: |
            echo $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY   
      - name: SSH to EC2 instance
        run: |
            
            mkdir -p ~/.ssh
            echo "${{ secrets.SSH_PEM }}" > ~/.ssh/ec2.pem
            chmod 600 ~/.ssh/ec2.pem
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2.pem ec2-user@34.201.2.135 <<EOF
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 729108405802.dkr.ecr.us-east-1.amazonaws.com
            cd ~
            docker compose -f quote-generator/docker-compose.yml down
            mv quote-generator/grafana-data .
            rm -rf quote-generator
            git clone https://${{ secrets.GIT_PAT }}@github.com/${{ secrets.GIT_REPO }}
            cd quote-generator
            rm -rf grafana-data
            mv ~/grafana-data .
            chmod 550 grafana-data
            chown -R ec2-user:ec2-user grafana-data/
            docker compose up -d

            EOF


