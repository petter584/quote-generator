name: CI/CD pipeline

on:
  push:
    branches:
        - main

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Run Tests
        run: |
            pip3 install -r requirements.txt
            python3 tests.py
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1
      - name: Login to Amazon ECR
        id: ecr-user
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        env:
            ECR_REGISTRY: ${{ steps.ecr-user.outputs.registry }}
            ECR_REPOSITORY: quote-repo2
            IMAGE_TAG: ${{ github.run_number }}
        run: |
            docker build -t quote-service:latest .
            docker tag quote-service:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Deploy to EC2
        run: |
            
            mkdir -p ~/.ssh
            echo "${{ secrets.SSH_PEM }}" > ~/.ssh/ec2.pem
            chmod 600 ~/.ssh/ec2.pem
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }} "export ECR_REPOSITORY=${{ steps.ecr-user.outputs.registry }} && export IMAGE_TAG=${{ github.run_number }} && bash -s" <<EOF
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECR_REPOSITORY}
            cd ~
            if [ -d "quote-generator" ]; then
              docker compose -f quote-generator/docker-compose.yml down
              mv quote-generator/grafana-data .
              mv quote-generator/prometheus-data .
              rm -rf quote-generator
              git clone https://${{ secrets.GIT_PAT }}@github.com/${{ secrets.GIT_REPO }}
              rm -rf ~/quote-generator/grafana-data
              rm -rf ~/quote-generator/prometheus-data
              mv ~/grafana-data ~/quote-generator
              mv ~/prometheus-data ~/quote-generator
            else
              git clone https://${{ secrets.GIT_PAT }}@github.com/${{ secrets.GIT_REPO }}
            fi
            docker compose -f quote-generator/docker-compose.yml up -d
            
            EOF


